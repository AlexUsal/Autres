
#include <ArduinoBLE.h>
#include <Arduino_LSM6DS3.h>



BLEService IMUService("19b10000-e8f2-537e-4f6c-d104768a1214");

BLEStringCharacteristic IMUCharacteristic("19b10010-e8f2-537e-4f6c-d104768a1214",  // standard 16-bit characteristic UUID

    BLERead | BLENotify, 50); // remote clients will be able to get notifications if this characteristic changes

String oldIMUReading = "0";

void setup() {

  Serial.begin(38400);    // initialize serial communication
  //while (!Serial); (decoment if you want the arduino to check connection only if serial console launched)

  pinMode(LED_BUILTIN, OUTPUT); // initialize the built-in LED pin to indicate when a central is connected

  // begin initialization
  if (!BLE.begin()) {
    Serial.println("Starting BLE failed!");
    while (1);
  }

  if (!IMU.begin()) {
    Serial.println("Failed to initialize IMU!");
    while (1);
  }


  /* Set a local name for the BLE device
     This name will appear in advertising packets
     and can be used by remote devices to identify this BLE device
     The name can be changed but maybe be truncated based on space left in advertisement packet
  */

  BLE.setLocalName("KinImu");
  BLE.setAdvertisedService(IMUService); // add the service UUID
  IMUService.addCharacteristic(IMUCharacteristic); // add the 6IMU characteristic
  BLE.addService(IMUService); // Add the service
  IMUCharacteristic.writeValue(oldIMUReading); // set initial value for this characteristic


  /* Start advertising BLE.  It will start continuously transmitting BLE
     advertising packets and will be visible to remote BLE central devices
     until it receives a new connection */


  // start advertising
  BLE.advertise();
  Serial.println("Bluetooth device active, waiting for connections...");

}



void loop() {



  // wait for a BLE central

  BLEDevice central = BLE.central();

  // if a central is connected to the peripheral:

  if (central) {
    Serial.print("Connected to central: ");
    // print the central's BT address:
    Serial.println(central.address());
    // turn on the LED to indicate the connection:
    digitalWrite(LED_BUILTIN, HIGH);

    // while the central is connected:
    while (central.connected()) {
      //long currentMillis = millis();
      //if (currentMillis - previousMillis >= 200) {
      //  previousMillis = currentMillis;
        updateIMU();

      //}

    }

    // when the central disconnects, turn off the LED:

    digitalWrite(LED_BUILTIN, LOW);
    Serial.print("Disconnected from central: ");
    Serial.println(central.address());

  }

}



void updateIMU() {
  float x, y, z;

  if (IMU.accelerationAvailable()) {

    IMU.readAcceleration(x, y, z);

    x=x*16000;
    y=y*16000;
    z=z*16000;

    String ImuData = String((int)x)+" "+String((int)y)+" "+String((int)z);

    Serial.println(ImuData);

    IMUCharacteristic.writeValue(ImuData);

  }

}
